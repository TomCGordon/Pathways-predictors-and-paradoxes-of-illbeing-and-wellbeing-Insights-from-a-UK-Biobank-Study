import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt
import neurokit2 as nk

def load_ecg_data(filepath, resolution, sampling_rate):
    """
    Loads ECG data from a CSV file with a single row of data.

    Args:
        filepath (str): Path to the CSV file.
        resolution (float): Resolution of the ECG data in microvolts per LSB.
        sampling_rate (int): Sampling rate of the ECG signal in Hz.

    Returns:
        numpy.ndarray: Extracted ECG signal.
    """
    ecg_data = pd.read_csv(filepath, header=None)
    ecg_signal = ecg_data.iloc[0].values.astype(np.float32)
    ecg_signal_microvolts = ecg_signal * resolution

    # Baseline Wander Removal
    b_highpass, a_highpass = butter_highpass(cutoff=0.5, fs=sampling_rate)
    ecg_filtered = filtfilt(b_highpass, a_highpass, ecg_signal_microvolts)

    # Noise Removal
    b_bandpass, a_bandpass = butter_bandpass(lowcut=1, highcut=50, fs=sampling_rate)
    ecg_denoised = filtfilt(b_bandpass, a_bandpass, ecg_filtered)

    return ecg_signal_microvolts, ecg_filtered, ecg_denoised

def butter_highpass(cutoff, fs, order=5):
    """Creates a high-pass Butterworth filter."""
    nyq = 0.5 * fs
    low = cutoff / nyq
    b, a = butter(order, low, btype='highpass')
    return b, a

def butter_bandpass(lowcut, highcut, fs, order=5):
    """Creates a bandpass Butterworth filter."""
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='bandpass')
    return b, a

def analyze_ecg(filepath, resolution, sampling_rate, adaptive_threshold_percentage=0.25):
    """
    Analyzes the ECG data to detect R-peaks and calculate HRV metrics.

    Args:
        filepath (str): Path to the ECG data file.
        resolution (float): Resolution of the ECG data in microvolts per LSB.
        sampling_rate (int): Sampling rate of the ECG signal in Hz.
        adaptive_threshold_percentage (float): Percentage of the maximum amplitude to filter R-peaks.

    Returns:
        dict: A dictionary containing HRV metrics.
    """
    ecg_original, ecg_filtered, ecg_denoised = load_ecg_data(filepath, resolution, sampling_rate)
    time = np.linspace(0, len(ecg_original) / sampling_rate, len(ecg_original))

    # R-peak detection with NeuroKit2
    _, rpeaks_info = nk.ecg_peaks(ecg_denoised, sampling_rate=sampling_rate, method="neurokit", correct_artifacts=False)
    rpeaks = rpeaks_info["ECG_R_Peaks"]

    # Calculate adaptive amplitude threshold as a percentage of the maximum amplitude
    max_amplitude = np.max(ecg_denoised)
    adaptive_threshold = adaptive_threshold_percentage * max_amplitude

    # Filter out low amplitude R-peaks using the adaptive threshold
    rpeaks_amplitudes = np.array([ecg_denoised[rpeak] for rpeak in rpeaks])
    filtered_rpeaks = [rpeak for rpeak, amplitude in zip(rpeaks, rpeaks_amplitudes) if amplitude > adaptive_threshold]

    # Calculate RR intervals (in milliseconds) using filtered and unfiltered R-peaks
    rr_intervals_filtered = np.diff(filtered_rpeaks) * (1000 / sampling_rate)
    rr_intervals_unfiltered = np.diff(rpeaks) * (1000 / sampling_rate)

    # Calculate RMSSD using RR intervals from filtered and unfiltered R-peaks
    rmssd_filtered = np.sqrt(np.mean(np.square(np.diff(rr_intervals_filtered))))
    rmssd_unfiltered = np.sqrt(np.mean(np.square(np.diff(rr_intervals_unfiltered))))

    # Calculate heart rate based on RR intervals from filtered and unfiltered R-peaks
    heart_rates_filtered = 60000 / rr_intervals_filtered
    heart_rates_unfiltered = 60000 / rr_intervals_unfiltered
    mean_hr_filtered = np.mean(heart_rates_filtered)
    mean_hr_unfiltered = np.mean(heart_rates_unfiltered)

    # Visualization
    plt.figure(figsize=(12, 10))

    # Original ECG Signal
    plt.subplot(3, 1, 1)
    plt.plot(time, ecg_original, label="Original")
    plt.title("ECG Before Baseline Wander Removal")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")

    # ECG after Noise Removal
    plt.subplot(3, 1, 2)
    plt.plot(time, ecg_denoised, label="Denoised")
    plt.title("ECG After Noise Removal")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")

    # R-peak Detection
    plt.subplot(3, 1, 3)
    plt.plot(time, ecg_denoised, label="Denoised")
    plt.plot(time[rpeaks], ecg_denoised[rpeaks], 'ro', label='All R-peaks')
    plt.plot(time[filtered_rpeaks], ecg_denoised[filtered_rpeaks], 'go', label='Filtered R-peaks (used in RMSSD)')
    plt.legend()
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")
    plt.title("R-Peaks Detection")

    plt.tight_layout()
    plt.show()

    # Print information
    print("Number of R-peaks removed by filtering:", len(rpeaks) - len(filtered_rpeaks))
    print("RMSSD (ms) - Filtered:", rmssd_filtered)
    print("RMSSD (ms) - Unfiltered:", rmssd_unfiltered)
    print("Mean Heart Rate (bpm) - Filtered:", mean_hr_filtered)
    print("Mean Heart Rate (bpm) - Unfiltered:", mean_hr_unfiltered)

    # Return metrics as a dictionary
    return {
        "rmssd_filtered": rmssd_filtered,
        "rmssd_unfiltered": rmssd_unfiltered,
        "mean_hr_filtered": mean_hr_filtered,
        "mean_hr_unfiltered": mean_hr_unfiltered
    }
